#!/usr/bin/env luajit
local TERMWIDTH = 80
local VERSION = "v0.1"
local LIBPATH = '%lib/?.lua'
local AUR_BASE = "https://aur.archlinux.org"
local AUR_RPC_FORMAT = "%s/rpc.php?v=3&type=%s&%s=%s"
local AUR_PKGBASE_FORMAT = "%s/pkgbase/%s/?setlang=en"
local AURCATEGORIES = {[1]=false, [2]="daemons", [3]="devel", [4]="editors",
        [5]="emulators", [6]="games", [7]="gnome", [8]="i18n", [9]="kde",
        [10]="lib", [11]="modules", [12]="multimedia", [13]="network",
        [14]="office", [15]="science", [16]="system", [17]="x11", [18]="xfce",
        [19]="kernels", [20]="fonts"}
do
  local k,v
  for k,v in ipairs(AURCATEGORIES) do
    if v then AURCATEGORIES[v] = k end
  end
end


local AURFIELDS = {'ID', 'Name', 'PackageBaseID', 'PackageBase', 'Version',
      'Category', 'Description', 'URL', 'URLPath', 'NumVotes',
      'OutOfDate', 'Maintainer', 'FirstSubmitted', 'LastModified', 'Depends',
      'MakeDepends', 'CheckDepends', 'OptDepends', 'Conflicts', 'Provides',
      'Replaces', 'Groups', 'License'}

local ffi=require("ffi")
ffi.cdef[[
char *getcwd(char *, size_t);
void freecwd(char*) __asm__("free");
int isatty(int);
static const int STDOUT=1;
static const int TIOCGWINSZ  = 0x5413;
struct winsize
{
  unsigned short ws_row;  /* rows, in characters */
  unsigned short ws_col;  /* columns, in characters */
  unsigned short ws_xpixel; /* horizontal size, pixels */
  unsigned short ws_ypixel; /* vertical size, pixels */
};
int ioctl(int fd, int cmd, ... );
typedef long int time_t;
struct tm {
  int tm_sec;    /* Seconds (0-60) */
  int tm_min;    /* Minutes (0-59) */
  int tm_hour;   /* Hours (0-23) */
  int tm_mday;   /* Day of the month (1-31) */
  int tm_mon;    /* Month (0-11) */
  int tm_year;   /* Year - 1900 */
  int tm_wday;   /* Day of the week (0-6, Sunday = 0) */
  int tm_yday;   /* Day in the year (0-365, 1 Jan = 0) */
  int tm_isdst;  /* Daylight saving time */
  long int tm_gmtoff;
  const char *tm_zone;
};
void tzset (void);
struct tm *localtime(const time_t* timep);
struct tm *localtime_r(const time_t *timep, struct tm *result);
time_t mktime(struct tm *tm);
size_t strftime(char *s, size_t max, const char *format,
                       const struct tm *tm);
char *strptime(const char *s, const char *format, struct tm *tm);
int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
]]

local getexepath = function()
  local mainpath = arg[0]:match('^(.-)[^/]*$') or ''
  if mainpath:sub(1,1) == '/' then return mainpath end
  local charp = ffi.C.getcwd(nil, 0)
  local path = ffi.string(charp)
  ffi.C.freecwd(charp)
  return path ..'/'.. mainpath
end
package.path = LIBPATH:gsub('%%', getexepath()) .. ";?.lua;"   .. package.path

local alpm=require("alpm")
local archive=require("archive")
local json=require("JSON")
local curl=require("curl")
local opt=require("getopt")
local io=require("io")
local os=require("os")
local ansiseq=require("ansiseq")

local enum = {}
function enum.bor(a, b)
    return ffi.cast(ffi.typeof(a),
      bit.bor(tonumber(a),tonumber(ffi.cast(ffi.typeof(a), b))))
end
function enum.band(a, b)
    return ffi.cast(ffi.typeof(a),
      bit.band(tonumber(a), tonumber(ffi.cast(ffi.typeof(a), b))))
end
function enum.hasset(a, b)
    return enum.band(a, b) == b
end

function table.set(t) -- set of list
  local u = { }
  for _, v in ipairs(t) do u[v] = true end
  return u
end

function table.add(f, l)
  assert(l ~= nil)
  if type(f) ~= 'table' then return {l} end
  for _, v in ipairs(f) do
    if v == l then return f end
  end
  f[#f+1] = l
  return f
end

local AURPC = {}
AURPC.__index=AURPC
function AURPC.new(pacman,t)
  t = t or {}
  t.pacman = pacman
  setmetatable(t, AURPC)
  return t
end
function AURPC:geturl(curleasy, method, args, start, stop)
  local m={multiinfo=2, info=1, search=1, msearch=1, suggest=1, ['suggest-pkgbase']=1}
  if m[method] and m[method] == 2  then
    local esc,i={}
    if not start or start < 1 then start = 1 end
    if not stop or stop > #args then stop = #args end
    for i=start,stop do
      esc[#esc+1]=curleasy:escape(args[i])
    end
    return AUR_RPC_FORMAT:format(AUR_BASE, method, 'arg[]', table.concat(esc, '&arg[]='))
  elseif m[method] then
    return AUR_RPC_FORMAT:format(AUR_BASE, method, 'arg', curleasy:escape(args))
  end
  return nil
end
function AURPC:request(rtype, args)
  local c = curl.Easy.init()

  local data = curl.WriteBuffer()
  c:setopt("CURLOPT_FOLLOWLOCATION", 1)
  c:setopt("CURLOPT_WRITEDATA", curl.Null)
  c:setopt("CURLOPT_WRITEFUNCTION", data:getwritecb())
  c:setopt("CURLOPT_URL", self:geturl(c, rtype, args))
  local res = c:perform()
  if res ~= curl.CURLE_OK then return false, c:strerror(res) end
  local pkginfos = json:decode(data:read())
  data:clear()
  if pkginfos.type == 'error' then return false, pkginfos.error, pkginfos.results end
  return pkginfos.results, pkginfos.resultcount, pkginfos.type
end
function AURPC:getinfo(pkgs)
  local info = (type(pkgs) == 'table') and "multiinfo" or "info"
  return self:request(info, pkgs)
end

function AURPC:getbaseinfo(pkgbase)
  local translate = { ["Last Updated"]="LastModified", Votes="NumVotes" }
  local url = AUR_PKGBASE_FORMAT:format(AUR_BASE, pkgbase)
  local data = curl.WriteBuffer()
  local c = curl.Easy.init()
  c:setopt("CURLOPT_WRITEDATA", nil)
  c:setopt("CURLOPT_WRITEFUNCTION", data:getwritecb())
  c:setopt("CURLOPT_FOLLOWLOCATION", 0)
  c:setopt("CURLOPT_URL", url)
  if curl.CURLE_OK ~= c:perform() then return nil end
  local info = data:read():match('<div id="pkgdetails" .-\n</div>')
  if not info then return false, "Packagebase not found in AUR." end
  local pkginfo,k,v={PackageBase=pkgbase}
  pkginfo.URL=url:gsub("%?setlang=en$", "")
  pkginfo.URLPath=info:match('<a href="([^"]+)"%s*>%s*Download%s')
  --pkginfo.CategoryID=info:match('<td>%s*<a href="/packages/%?C=(%d+)">')
  pkginfo.OutOfDate=info:match('<li><span class="flagged">%s*([^<][^<]-)%s*</span></li>')
  for k,v in
    info:gmatch("<tr>%s*<th>%s*([^<:]*):?%s*</th>%s*<td>%s*%b<>%s*([^<]*[^<%s])%s*%b<>%s*</td>%s*</tr>")
  do
    pkginfo[translate[k] or k:gsub('%s+','')] = v
  end
  for k,v in
    info:gmatch("<tr>%s*<th>%s*([^<:]*):?%s*</th>%s*<td>%s*([^<]*[^<%s])%s*</td>%s*</tr>")
  do
    pkginfo[translate[k] or k:gsub('%s+','')] = v
  end
  pkginfo.Packages = {}
  local pkgs = info:match('<div id="pkgs" class="listing">.-</div>')
  for pkg in pkgs:gmatch('"/packages/([^/]+)/"') do
    pkginfo.Packages[#pkginfo.Packages+1] = pkg
  end
  return pkginfo
end


local BaseTree = {}
BaseTree.__index = BaseTree
function BaseTree.new(t)
   t = t or {}
   return setmetatable(t, BaseTree)
end
setmetatable(BaseTree,{
  __call = function (tbl,arg)
     return tbl.new(arg)
  end,
})
function BaseTree:add(pkg)
  if self[pkg.PackageBase] == nil then self[pkg.PackageBase] = {} end
  table.add(self[pkg.PackageBase], pkg.Name)
end


function get_foreign_pkgs(a)
  local dbs = a:get_syncdbs()
  local pkg = a:get_localdb():get_pkgcache()
  local fpkgs = {}
  while pkg ~= nil do
    local name = alpm.alpm_pkg_get_name(pkg.data)
    local db = dbs
    local foreign=true
    while db ~= nil do
      if alpm.alpm_db_get_pkg(db.data, name) ~= nil then
        foreign = false
        break
      end
      db = db:Next()
    end
    if foreign then fpkgs[#fpkgs+1] = alpm.Pkgref(pkg.data) end
    pkg = pkg:Next()
  end
  return fpkgs
end

function AURPC:getupdates()
  assert(self.pacman)
  local pkgs={}
  for k,v in ipairs(get_foreign_pkgs(self.pacman)) do
    pkgs[k] = alpm.String(v:get_name())
  end
  local pkginfos = self:getinfo(pkgs)
  local localdb = self.pacman:get_localdb()
  local updates={}
  for _,v in ipairs(pkginfos) do
    local p = localdb:get_pkg(v.Name)
    if (p.vercmp(v.Version, p:get_version()) > 0) then
      v.OldVersion = ffi.string(p:get_version())
      updates[#updates+1] = v
    end
  end
  return updates
end

function AURPC:download(pkg)

end


function fxerror(e,f,...)
  io.stderr:write(string.format(f,...))
  os.exit(e and tonumber(e) or 1)
end
function pxerror(e,s)
  io.stderr:write(s)
  if string.sub(s, -1) ~= '\n' then io.stderr:write('\n') end
  os.exit(e and tonumber(e) or 1)
end

function simplewrap(text,length,indent,firstlength,subindent)
  local lines,i,len,w={},1,firstlength or length
  for n,w in text:gmatch("(\n?)%s*(%S+)") do
    if lines[i] == nil then
      lines[i] = w
    elseif (n == '\n') or (#lines[i] + 1 + #w > len) then
      i = i+1
      len = length
      if subindent and n ~= '\n' then
        lines[i] = subindent .. w
      else
        lines[i] = w
      end
    else
      lines[i] = lines[i] .. ' ' .. w
    end
  end
  return table.concat(lines, '\n'..indent)
end

function gethelp()
return 'lauri '..VERSION..[=[
(C) 2014 Andreas Bosch <code@progandy.de>
Usage: lauri <action> [ <options> ] TERMS ...

Actions (mutually exclusive):
  -h        This help
  -b        display base package info
  -i        display package info
  -m        search for maintainer
  -s        search for package(s)
  -u        check for updates
  -d        download package(s)
  -r        list AUR dependencies.
 Exception: -u and -d can be combined

Options:
  -r        include AUR dependencies recursively (info, update, download)
  -c WHENC  colorize output; values: auto/always/never (default: auto, detect tty)
  -w WIDTH  wordwrap width; disable with 0 (min: 40, default: 80 in tty, else 0)
  -q        quiet, minimal output
  -v        verbose output
]=]
end

local Verbosity = {QUIET=-1,DEFAULT=0,VERBOSE=1}
local verbosity = Verbosity.DEFAULT
local istty = ffi.C.isatty(ffi.C.STDOUT) ~= 0
local aurbase = os.getenv("AUR_BASE")
if aurbase and aurbase:match("https?://.*%.") then
  AUR_BASE = aurbase
end

local options,nonopts = opt.getopt("c:bhimrsuqvw:", arg)
if not options then
  pxerror(1, nonopts)
elseif options.h then
  io.stdout:write(gethelp())
  os.exit(0)
elseif options.q and options.v then
  pxerror(2, "Options verbose and quiet conflict.\n")
end

if options.q then
  verbosity = Verbosity.QUIET
elseif options.v == 1 then
  verbosity = Verbosity.VERBOSE
elseif options.v and options.v > 1 then
  verbosity = Verbosity.EXTRAVERBOSE
end

do
  local i=0
  for _,v in ipairs({'b','i','m','s','u','d'}) do
    if options[v] then i = i+1 end
  end
  if i == 0 and not options.r then
    pxerror(2, gethelp())
  elseif i == 2 and options.u and options.d then
    -- this is allowed to download updates
  elseif i > 1 then
    pxerror(2, "Info, search and update are mutually exclusive.\n")
  end
end

if options.c == nil or options.c == 'auto' then
  options.c = istty
elseif options.c == 'always' or options.c == 'true' or options.c == 'yes' then
  options.c = true
else
  options.c = false
end
string.fmt = options.c and string.formatc or function(self,...) return self:stripcsi():format(...) end
options.w = tonumber(options.w)
local wrapper=simplewrap
if options.w and options.w > 0 then
  if options.w < 40 then options.w = 40 end
  TERMWIDTH = options.w
elseif istty and options.w ~= 0 then
  local screen_size = ffi.new("struct winsize[1]")
  ffi.C.ioctl(ffi.C.STDOUT, ffi.C.TIOCGWINSZ, screen_size)
  TERMWIDTH = screen_size[0].ws_col;
  if TERMWIDTH < 40 then TERMWIDTH = 40 end;
else
  wrapper = function(s,_,i,...) return string.gsub(s, '\n', '\n'..i) end
end

curl.init(curl.CURL_GLOBAL_ALL)
errno=ffi.new("alpm_errno_t[1]")
pacman=alpm.Alpm.initialize('/', '/var/lib/pacman', errno)
dbs = {}
for l in io.lines("/etc/pacman.conf") do
    local s = l:match("^%s*%[%s*([^%]%s]*)%s*]%s*$")
    if s and s ~= 'options' then
        dbs[#dbs+1] = alpm.alpm_register_syncdb(pacman, s, 0)
    end
end

aur = AURPC.new(pacman)

function printpkg(pkg,fields)
  local line="&[bright]%-15s :&[reset] %s"
  local indent, width=string.rep(' ', 18), TERMWIDTH-18
  local indentex, widthex = string.rep(' ', 20), TERMWIDTH-20
  if pkg.CategoryID and not pkg.Category then pkg.Category = AURCATEGORIES[pkg.CategoryID] end
  for _,k in ipairs(fields or AURFIELDS) do
    local v = pkg[k]
    if type(v) == 'table' then
      if k == 'OptDepends' then
        print(line:fmt(k, wrapper(table.concat(v, '\n'), width, indent, width, '  ')))
        --[[print(line:fmt(k, wrapper(v[1], widthex, indent, width, '  ')))
        for i=2,#v do
          print((' '):rep(19) .. wrapper(v[i], widthex, indentex, width, '  '))
        end]]
      else
        print(line:fmt(k, wrapper(table.concat(v,', '), width, indent)))
      end
    elseif v then
      if k == "LastModified" or k == "FirstSubmitted" or k == "OutOfDate" then
        if v ~= '' and v ~= 0 then
          local t, tm
          if tonumber(v) then
            t = ffi.new("time_t[1]", v)
            tm = ffi.C.localtime(t)
          else
            tm = ffi.new("struct tm")
            t = ffi.C.strptime(v, "%Y-%m-%d %H:%M", tm)
            if t == nil or ffi.string(t) ~= "" then
              tm = nil
            else -- interpret all strings as GMT/UTC time
              local tz = os.getenv("TZ")
              ffi.C.setenv("TZ", "UTC", 1)
              ffi.C.tzset()
              t = ffi.C.mktime(tm)
              t = ffi.new("time_t[1]", t)
              if not tz then
                ffi.C.unsetenv("TZ")
              else
                ffi.C.setenv("TZ", tz, 1)
              end
              ffi.C.tzset()
              ffi.C.localtime_r(t, tm)
              if tm.tm_year == 0 then tm = nil end
            end
          end
          if tm ~= nil then
            local s = ffi.new("char[256]")
            ffi.C.strftime(s, 255, "%F %R %Z", tm)
            t = ffi.string(s)
            if t and t ~= '' then v = t end
          end
          print(line:fmt(k, wrapper(v, width, indent)))
        end
      else
        print(line:fmt(k, wrapper(tostring(v), width, indent)))
      end
    end
  end

end

AURBASEFIELDS = {unpack(AURFIELDS)}
AURBASEFIELDS[#AURBASEFIELDS+1] = "Submitter"
AURBASEFIELDS[#AURBASEFIELDS+1] = "LastPackager"
AURBASEFIELDS[#AURBASEFIELDS+1] = "Packages"
function printbase(base)
  printpkg(base, AURBASEFIELDS)
end
function dobaseinfo(aur, targets, verbosity)
  if not targets or #targets == 0 then
    fxerror(3,"Missing packagebase names.\n")
  end
  local a,err={},{}
  local restmpl = "&[bright]%s&[reset]"
  for _,n in ipairs(targets) do
    local p,m = aur:getbaseinfo(n)
    if p then
      if verbosity == Verbosity.QUIET then
        print(restmpl:fmt(p.PackageBase, p.Version))
        print('  '..wrapper(table.concat(p.Packages,', '), TERMWIDTH, '  '))
      else
        printbase(p)
        print()
      end
    else
      err[#err+1] = "Packagebase '" .. n .. "' not found in AUR.\n"
    end
  end
  if #err > 0 then pxerror(3,table.concat(err)) end
end

function doinfo(aur, targets, verbosity)
  if not targets or #targets == 0 then
    fxerror(3,"Missing package names.\n")
  end
  local p,m = aur:getinfo(targets)
  if not p or #p == 0 then
    fxerror(3,"Package(s) not found in AUR.\n")
  end
  local a,err={},{}
  local restmpl = "&[bright]%s &[green]%s&[reset]"
  for _,n in ipairs(p) do a[n.Name] = n end
  for _,n in ipairs(targets) do
    if a[n] then
      if verbosity == Verbosity.QUIET then
        print(restmpl:fmt(a[n].Name, a[n].Version))
        print('  '..wrapper(a[n].Description, TERMWIDTH, '  '))
      else
        printpkg(a[n])
        print()
      end
    else
      err[#err+1] = "Package '" .. n .. "' not found in AUR.\n"
    end
  end
  if #err > 0 then pxerror(3,table.concat(err)) end
end

function domsearch(aur, targets, verbosity)
  if not targets or #targets ~= 1 then
    fxerror(3,"Exactly one maintainer required.\n")
  end
  local p,m = aur:request("msearch", targets[1])
  if not p or #p == 0 then
    fxerror(3,"Maintainer has no packages in AUR.\n")
  end
  local a,err={},{}
  local restmpl = "&[bright]%s &[green]%s&[reset]"
  for _,n in ipairs(p) do
    if verbosity == Verbosity.QUIET then
      print(n.Name)
    elseif verbosity >= Verbosity.VERBOSE then
      printpkg(n)
      print()
    else
      print(restmpl:fmt(n.Name, n.Version))
      print('  '..wrapper(n.Description, TERMWIDTH, '  '))
    end
  end
end
function pattern_extract_literal(p)
  local LIT,ESC,ALT=0,1,2
  local consume,state = 0,LIT
  local result,bestresult = '',''
  for c in p:gmatch('.') do
    if consume > 0 then
      consume = consume - 1
    elseif state == LIT then
      if c == '%' then
        state = ESC
        result = ''
      elseif c == '?' or c == '-' or c == '*' or c == '+' then
        if result == bestresult then 
          result = result:sub(1,-2)
          bestresult = result
        else
          result = result:sub(1,-2)
        end
      elseif c == '(' or c == ')' then
        -- no special handling
      elseif c == '.' then
        result = ''
      elseif c == '[' then
        result = ''
        state = ALT
      else
        result = result .. c
        if #result > #bestresult then bestresult = result end
      end
    elseif state == ESC then
      state = LIT
      if c == 'b' then
        consume = 2
      end
    elseif state == ALT then
      if c == '%' then
        consume = 1
      elseif c == ']' then
        state = LIT
      end
    end
  end
  return bestresult
end
function matchall(s, patterns)
  if type(s) ~= 'table' then s = {tostring(s)} end
  for _,p in ipairs(patterns) do
    local m=false
    for _,h in ipairs(s) do
      if h:match(p) then m=true ; break end
    end
    if not m then return false end
  end
  return true
end
function dosearch(aur, terms, verbosity)
  local p=""
  if #nonopts == 0 then
    pxerror(3, "Missing search terms.\n")
  end
  -- find the longest search term for initial search
  for i=1,#nonopts do
    if not nonopts[i]:match('[%(%)%.%%%+%-%*%?%[%^%$]') and #nonopts[i] > #p then p=nonopts[i] end
  end
  if #p == 0 then
    for i=1,#nonopts do
      p = pattern_extract_literal(nonopts[i])
      if #p > 0 then break end
    end
    if #p == 0 then
      pxerror(3, "Missing a pattern-free search term.\n")
    end
  end
  local pkginfos,errmsg = aur:request('search', p)
  if not pkginfos then fxerror(3, 'Error: %s\n', errmsg) end
  local restmpl = "&[bright;magenta]aur/&[defaultfg]%s &[green]%s&[reset] &[cyan](%d)&[reset]"
  table.sort(pkginfos, function(a,b) return a.Name < b.Name end)
  for _,pkg in ipairs(pkginfos) do
  -- filter more here. only description or only pkgname
    if matchall({pkg.Name , pkg.Description}, nonopts) then
      if verbosity == Verbosity.QUIET then
        print(pkg.Name)
      elseif verbosity >= Verbosity.VERBOSE then
        printpkg(pkg)
        print()
      else
        print(restmpl:fmt(pkg.Name, pkg.Version, pkg.NumVotes))
        print('  '..wrapper(pkg.Description, TERMWIDTH, '  '))
      end
    end
  end
end
function doupdate(aur, verbosity)
  local u u=aur:getupdates()
  if not u or #u == 0 then
    pxerror(4, "No updates available in the AUR.\n")
  end
  local restmpl = "&[bright]%s &[green]%s&[reset] &[red](%s)&[reset]"
  local verbose=false
  if verbosity and verbosity >= Verbosity.VERBOSE then
    verbose = true
    restmpl = restmpl .. ' &[dim]%s&[reset]'
  end
  for i=1,#u do
    if verbose then
      print(wrapper(restmpl:fmt(u[i].Name, u[i].Version, 
                                u[i].OldVersion, u[i].URLPath), TERMWIDTH, '  '))
    elseif verbosity == Verbosity.QUIET then
      print(u[i].Name)
    else
      print(wrapper(restmpl:fmt(u[i].Name, u[i].Version, 
                                u[i].OldVersion), TERMWIDTH, '  '))
    end
  end
end


function pkg_local_satisfier(pkgcache, dep)
    return alpm.find_satisfier(pkgcache, dep) ~= nil
end

function pkg_sync_satisfier(handle, dblist, dep)
    return alpm.find_dbs_satisfier(handle, dblist, dep) ~= nil
end

local pkgcache = pacman:get_localdb():get_pkgcache()
local syncdbs = pacman:get_syncdbs()
function deprecurse(aur, pkg, cache)
  local dep ={}
  if  type(cache)~='table' then cache = {} end
  if nil ~= pkg.Depends then
    for _,d in ipairs(pkg.Depends) do
      if not pkg_local_satisfier(pkgcache, d)
        and not pkg_sync_satisfier(pacman, syncdbs, d)
        and not cache[d]
      then
        cache[d] = true
        dep[#dep+1] = d:match("^[^><= ]*")
      end
    end
  end
  if nil ~= pkg.MakeDepends then
    for _,d in ipairs(pkg.MakeDepends) do
      if not pkg_local_satisfier(pkgcache, d)
        and not pkg_sync_satisfier(pacman, syncdbs, d)
        and not cache[d]
      then
        cache[d] = true
        dep[#dep+1] = d:match("^[^><= ]*")
      end
    end
  end
  local p,m = aur:getinfo(dep)
  local ret = {}
  if p and #p > 0 then
    ret = {unpack(p)}
    for _,k in ipairs(p) do
      cache[k.Name] = k
      local deps = deprecurse(aur, k, cache)
      for _,d in ipairs(deps) do
        table.insert(ret, d)
      end
    end
  end
  return ret
end

function dodepends(aur, targets, verbosity)
  if not targets or #targets < 1 then
    fxerror(3,"Missing package names.\n")
  end
  local p,m = aur:getinfo(targets)
  if not p or #p == 0 then
    fxerror(3,"Package(s) not found in AUR.\n")
  end
  local cache,deps={},{}
  for _,pkg in ipairs(p) do
    cache[pkg.Name] = pkg
    table.insert(deps, pkg)
  end
  for _,pkg in ipairs(p) do
    local dep = deprecurse(aur, pkg, cache)
    for _,d in ipairs(dep) do
      table.insert(deps, d)
    end
  end
  local a,err={},{}
  local restmpl = "&[bright]%s &[green]%s&[reset]"
  for _,n in ipairs(deps) do
    if verbosity == Verbosity.QUIET then
      print(restmpl:fmt(n.Name, n.Version))
      print('  '..wrapper(n.Description, TERMWIDTH, '  '))
    else
      printpkg(n)
      print()
    end
  end
  if #err > 0 then pxerror(3,table.concat(err)) end
end

if options.b then
  dobaseinfo(aur, nonopts, verbosity)
elseif options.i then
  doinfo(aur, nonopts, verbosity)
elseif options.m then
  domsearch(aur, nonopts, verbosity)
elseif options.s then
  dosearch(aur, nonopts, verbosity)
elseif options.u then
  doupdate(aur, verbosity)
elseif options.r then
  dodepends(aur, nonopts, verbosity)
else
  pxerror(1, "Missing action\n")
end

os.exit()


--for k,v in ipairs(list:to_table()) do
function getname(a)
    if not a then return "" end
    a = alpm.Pkg.get_name(a)
    if not a then return "" end
    return ffi.string(a)
end
local pkgs={}
for k,v in ipairs(get_foreign_pkgs(pacman)) do
    pkgs[k] = alpm.String(v:get_name())
end




s = alpm.find_satisfier(pacman:get_localdb():get_pkgcache(), "libgl")
print(ffi.string(s:get_name()))
s = alpm.find_dbs_satisfier(pacman, pacman:get_syncdbs(), "libgl")
print(ffi.string(s:get_name()))
print(s==nil)
--print(json:encode_pretty(json:decode(data.get())))
--print(archive.archive_version_number())
--print(ffi.string(archive.archive_version_string()))
--[[

resolve deps:

1: fetch AUR (multiinfo)
3: find missing (fetched + local + sync)
4: fetch missing (multiinfo)
5: find missing (fetched + local + sync)
6: if missing goto 4
7: topo deps

8: sort depends in install, tempinstall, aur, aur tempinstall

9: install depends
10: tempinstall depends
11: loop through makepkg,
    prepare commands with split packages and asdepends switches
12: remove tempinstall depends
13: remove aur tempinstall
]]

--: vim: set ts=2 sw=2 tw=80 et :--
